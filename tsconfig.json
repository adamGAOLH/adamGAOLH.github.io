{
  "compilerOptions": {
    "target": "ES2020", //将代码编译成最新版本js
    "module": "ESNext", // 使用ES Moudle格式打包编译后的文件
    "lib": ["ES2020", "DOM", "DOM.Iterable"], //引入ES最新特性和DOM接口的类型定义
    "skipLibCheck": true, //跳过对.d.ts文件的类型检查

    /* Bundler mode */
    "moduleResolution": "node", //bundler是 TypeScript 中的一个配置选项，它表示模块解析策略使用的是打包工具。在这种情况下，TypeScript 会查找已经打包的模块，而不是直接查找源代码文件。这通常用于在打包后的代码中使用模块别名或路径映射。
    "resolveJsonModule": true, //允许引入JSON文件
    "isolatedModules": true, //要求所有文件都是ESModule模块
    "noEmit": true, //不输出文件，即编译后不会生成任何j文件
    "jsx": "preserve", // 保留原始的jsx代，不进行编译
    "esModuleInterop": true, //允许使用import 引入使用export =导出的内容
    "allowJs": true, //允许使用js
    "baseUrl": ".",
    "paths": { "@/*": ["src/*"], "#/*": ["type/*"] },

    /* Linting */
    "strict": true, //开启所有严格的类型检查
    "noUnusedLocals": true, //报告未使用局部变量的错误
    "noUnusedParameters": true, //报告函数中未使用参数的错误
    "noFallthroughCasesInSwitch": true //确保switch语句中的任何非空情况都包含
  },
  //   需要检测的文件
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue", "src/api/user"],
  "references": [{ "path": "./tsconfig.node.json" }] //为文件进行不同的配置
}
